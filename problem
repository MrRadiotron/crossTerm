#! /usr/bin/python

import serial
import threading
from PySide import QtCore, QtGui, QtUiTools

def cleanUp():
	global serial_port
	if serial_port.connected:
		serial_port.disconnect_port()
		
	QtCore.QCoreApplication.instance().quit()

class cross_term_serial_port:
	def __init__(self, ui):
		self.ui = ui
		self.connected = False

	def connect_port(self):
		try:
			self.serial_port = serial.Serial("/dev/ttyS0", 9600, timeout = 0)
			self.connected = True
		except serial.SerialException, e:
			self.connected = False

		if self.connected:
			self.serial_thread = threading.Thread(target=self.recieve_port, args=([ui]))
			self.serial_thread.start()

	def disconnect_port(self):
		self.connected = False
		self.serial_thread.join()
		self.serial_port.close()

	def recieve_port(self, ui):
		while self.connected:
			try:
				text = self.serial_port.read(1)
				if text != '':
					ui.receiveEditCursor.movePosition(ui.receiveEditCursor.End)
					ui.receiveEditCursor.insertText(text)
					ui.receiveEditCursor.movePosition(ui.receiveEditCursor.End)
					ui.RECEIVE_EDIT.setTextCursor(ui.receiveEditCursor)
					#ui.RECEIVE_EDIT.appendPlainText(serialPort.read())
			except serial.SerialException, e:
				connected = False



class KeyPressEater(QtCore.QObject):
	def eventFilter(self, obj, event):
		global serial_port
		if event.type() == QtCore.QEvent.KeyPress:
				ch = event.text().encode('utf-8')
				if serial_port.connected == True:
					serial_port.serial_port.write(ch)

		return QtCore.QObject.eventFilter(self, obj, event)


def main():
	global serial_port

	serial_port = cross_term_serial_port(ui)

	app = QtGui.QApplication(sys.argv)
	ui = QtGui.QWidget()
	plain_edit = QtGui.QPlainTextEdit(ui)
	ui.addWidget(plain_edit)
	keyFilter = KeyPressEater(ui.plain_edit)
	ui.show()
	sys.exit(app.exec_())

if __name__ == '__main__':
	main()
